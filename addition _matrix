#include <iostream>
using namespace std;

class Matrix {
private:
    int rows, cols;
    int **mat;

public:
    Matrix(int r, int c) {
        rows = r;
        cols = c;
        mat = new int*[rows];
        for (int i = 0; i < rows; i++) {
            mat[i] = new int[cols];
        }
    }

    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] mat[i];
        }
        delete[] mat;
    }

    void inputMatrix() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cin >> mat[i][j];
            }
        }
    }

    void displayMatrix() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << mat[i][j] << " ";
            }
            cout << endl;
        }
    }

    Matrix add(const Matrix &other) const {
        if (rows != other.rows || cols != other.cols) {
            throw invalid_argument("Matrix dimensions do not match for addition.");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.mat[i][j] = mat[i][j] + other.mat[i][j];
            }
        }
        return result;
    }
};

int main() {
    int rows, cols;
    cin >> rows >> cols;
    Matrix matrix1(rows, cols);
    Matrix matrix2(rows, cols);
    matrix1.inputMatrix();
    matrix2.inputMatrix();

    try {
        Matrix result = matrix1.add(matrix2);
        result.displayMatrix();
    } catch (const exception &e) {
        cout << "Error: " << e.what() << endl;
    }

    return 0;
}